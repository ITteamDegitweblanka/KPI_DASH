// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====
enum Role {
  SUPER_ADMIN
  ADMIN
  LEADER
  SUB_LEADER
  STAFF
  GUEST
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum GoalType {
  PERFORMANCE
  DEVELOPMENT
  PROJECT
  PERSONAL
}

enum PerformanceRating {
  EXCEEDS_EXPECTATIONS
  MEETS_EXPECTATIONS
  NEEDS_IMPROVEMENT
  UNSATISFACTORY
}

enum PerformanceReviewStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  GOAL_ASSIGNED
  GOAL_UPDATED
  PERFORMANCE_REVIEW
  ONE_ON_ONE
  ANNOUNCEMENT
  REMINDER
}

enum DocumentStatus {
  PENDING
  VERIFIED
  REJECTED
  NOT_UPLOADED
}

// ===== MODELS =====

model User {
  id                String                @id @default(uuid())
  email             String                @unique
  password          String
  role              Role                  @default(STAFF)
  isActive          Boolean               @default(true)
  firstName         String
  lastName          String
  displayName       String
  avatarUrl         String?
  phoneNumber       String?
  title             String?
  department        String?
  workEmail         String?               @unique @map("work_email")
  dateOfBirth       DateTime?             @map("date_of_birth")
  nationality       String?
  hireDate          DateTime?             @map("hire_date")
  lastLogin         DateTime?             @map("last_login")
  street            String?
  city              String?
  state             String?
  country           String?
  postalCode        String?               @map("postal_code")
  accessibilityNeeds String?              @db.Text
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")

  branchId          String?
  branch            Branch?               @relation(fields: [branchId], references: [id])
  teamId            String?
  team              Team?                 @relation(fields: [teamId], references: [id])
  ledTeam           Team?                 @relation("TeamLeader")
  settings          UserSettings?
  emergencyContacts EmergencyContact[]
  identityDocuments IdentityDocument[]
  refreshTokens     RefreshToken[]
  goals             Goal[]
  keyResults        KeyResult[]
  performance       PerformanceReview[]   @relation("Reviewee")
  reviewsConducted  PerformanceReview[]   @relation("Reviewer")
  notifications     Notification[]

  @@map("users")
}

model UserSettings {
  id                 String    @id @default(uuid())
  userId             String    @unique
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme              String    @default("system")
  darkMode           Boolean   @default(false)
  highContrast       Boolean   @default(false)
  fontSize           String    @default("medium")
  emailNotifications Boolean   @default(true)
  pushNotifications  Boolean   @default(true)
  performanceUpdates Boolean   @default(true)
  newsletter         Boolean   @default(false)
  language           String    @default("en")
  timezone           String?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@map("user_settings")
}

model EmergencyContact {
  id           String   @id @default(uuid())
  name         String
  relationship String
  phone        String
  email        String?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("emergency_contacts")
}

model IdentityDocument {
  id         String         @id @default(uuid())
  name       String
  type       String
  number     String
  status     DocumentStatus @default(NOT_UPLOADED)
  fileName   String?        @map("file_name")
  expiryDate DateTime?      @map("expiry_date")
  issuedBy   String?        @map("issued_by")
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")

  @@map("identity_documents")
}

model Branch {
  id         String   @id @default(uuid())
  name       String
  location   String
  description String?
  contactEmail String?  @map("contact_email")
  phoneNumber String?   @map("phone_number")
  address     String?
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  teams       Team[]
  employees   User[]

  @@map("branches")
}

model Team {
  id         String   @id @default(uuid())
  name       String
  description String?
  isActive   Boolean   @default(true) @map("is_active")
  branchId   String    @map("branch_id")
  branch     Branch    @relation(fields: [branchId], references: [id])
  leaderId   String?   @unique @map("leader_id")
  leader     User?     @relation("TeamLeader", fields: [leaderId], references: [id])
  members    User[]
  goals      Goal[]
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@map("teams")
}

model Goal {
  id           String      @id @default(uuid())
  title        String
  description  String?
  targetValue  Float       @map("target_value")
  currentValue Float       @default(0) @map("current_value")
  dueDate      DateTime?   @map("due_date")
  status       GoalStatus  @default(NOT_STARTED)
  type         GoalType    @default(PERFORMANCE)
  employeeId   String      @map("employee_id")
  employee     User        @relation(fields: [employeeId], references: [id])
  teamId       String?     @map("team_id")
  team         Team?       @relation(fields: [teamId], references: [id])
  keyResults   KeyResult[]
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("goals")
}

model KeyResult {
  id           String      @id @default(uuid())
  description  String
  status       GoalStatus  @default(NOT_STARTED)
  progress     Int         @default(0)
  targetValue  Float?      @map("target_value")
  currentValue Float?      @default(0) @map("current_value")
  weight       Int?        @default(100)
  notes        String?
  goalId       String      @map("goal_id")
  goal         Goal        @relation(fields: [goalId], references: [id], onDelete: Cascade)
  ownerId      String?     @map("owner_id")
  owner        User?       @relation(fields: [ownerId], references: [id])
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("key_results")
}

model PerformanceReview {
  id                  String                @id @default(uuid())
  revieweeId          String                @map("reviewee_id")
  reviewee            User                  @relation("Reviewee", fields: [revieweeId], references: [id])
  reviewerId          String?               @map("reviewer_id")
  reviewer            User?                 @relation("Reviewer", fields: [reviewerId], references: [id])
  overallRating       PerformanceRating?    @map("overall_rating")
  strengths           String?               @db.Text
  areasForImprovement String?               @map("areas_for_improvement") @db.Text
  goalsForNextPeriod  String?               @map("goals_for_next_period") @db.Text
  feedback            String?               @db.Text
  status              PerformanceReviewStatus @default(DRAFT)
  reviewPeriodStart   DateTime?             @map("review_period_start")
  reviewPeriodEnd     DateTime?             @map("review_period_end")
  reviewDate          DateTime?             @map("review_date")
  dueDate             DateTime?             @map("due_date")
  isFinalized         Boolean               @default(false) @map("is_finalized")
  finalizedAt         DateTime?             @map("finalized_at")
  metrics             PerformanceMetric[]
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")

  @@map("performance_reviews")
}

model PerformanceMetric {
  id          String            @id @default(uuid())
  name        String
  description String?
  rating      PerformanceRating
  weight      Float             @default(1.0)
  comments    String?
  reviewId    String
  review      PerformanceReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("performance_metrics")
}

model Notification {
  id          String           @id @default(uuid())
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false) @map("is_read")
  link        String?
  userId      String           @map("user_id")
  user        User             @relation(fields: [userId], references: [id])
  createdAt   DateTime         @default(now()) @map("created_at")

  @@map("notifications")
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
