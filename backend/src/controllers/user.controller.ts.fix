import { Request, Response } from 'express';
import { StatusCodes } from 'http-status-codes';
import { Prisma, User, Role } from '@prisma/client';
import { prisma } from '../utils/prisma';
import { ApiError } from '../utils/api-error';
import { asyncHandler } from '../middleware/error.middleware';

// Extend the Express Request type to include user information
declare global {
  namespace Express {
    interface Request {
      user?: {
        id: string;
        email: string;
        role: Role;
      };
    }
  }
}

// ... (rest of the file remains the same until line 50)

  if (search) {
    where.OR = [
      { displayName: { contains: search, mode: 'insensitive' as const } },
      { email: { contains: search, mode: 'insensitive' as const } },
    ];
  }

// ... (rest of the file remains the same until line 120)
      title: true,
      phoneNumber: true,
      nationality: true,
      address: true,
      avatarUrl: true,
      team: {
        select: {
          id: true,
          name: true,
          branch: {
            select: {
              id: true,
              name: true,
            },
          },
        },
      },
// ... (rest of the file remains the same until line 240)

  // Prevent changing role of the last Super Admin
  if (user.role === Role.SUPER_ADMIN) {
    const superAdminCount = await prisma.user.count({
      where: { role: Role.SUPER_ADMIN },
    });

    if (superAdminCount <= 1) {
      throw new ApiError(
        StatusCodes.BAD_REQUEST,
        'Cannot change role of the last Super Admin'
      );
    }
  }

// ... (rest of the file remains the same until line 290)

  // Prevent deleting the last Super Admin
  if (user.role === Role.SUPER_ADMIN) {
    const superAdminCount = await prisma.user.count({
      where: { role: Role.SUPER_ADMIN },
    });

    if (superAdminCount <= 1) {
      throw new ApiError(
        StatusCodes.BAD_REQUEST,
        'Cannot delete the last Super Admin'
      );
    }
  }

// ... (rest of the file remains the same until line 340)
  if (![Role.LEADER, Role.SUB_LEADER, Role.ADMIN, Role.SUPER_ADMIN].includes(user.role)) {
    throw new ApiError(
      StatusCodes.FORBIDDEN,
      'Only team leaders, sub-leaders, and admins can manage team members'
    );
  }
